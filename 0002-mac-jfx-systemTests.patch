diff --git a/build.gradle b/build.gradle
index 42bd0ac1..90024ff7 100644
--- a/build.gradle
+++ b/build.gradle
@@ -351,7 +351,7 @@ defineProperty("BUILD_SRC_ZIP", "false")
 ext.IS_BUILD_SRC_ZIP = Boolean.parseBoolean(BUILD_SRC_ZIP)
 
 // Specifies whether to run full tests (true) or smoke tests (false)
-defineProperty("FULL_TEST", "true")
+defineProperty("FULL_TEST", "false")
 ext.IS_FULL_TEST = Boolean.parseBoolean(FULL_TEST);
 
 // Specifies whether to run robot-based visual tests (only used when FULL_TEST is also enabled)
@@ -458,7 +458,7 @@ if (hasProperty("CROSS_TOOLS_DIR")) {
 ext.CROSS_TOOLS_DIR = file(crossToolsDir)
 
 // Specifies whether to run tests with the present jfxrt.jar instead of compiling the new one
-defineProperty("BUILD_SDK_FOR_TEST", "false")
+defineProperty("BUILD_SDK_FOR_TEST", "true")
 ext.DO_BUILD_SDK_FOR_TEST = Boolean.parseBoolean(BUILD_SDK_FOR_TEST)
 
 // Specifies the location to point at SDK build when DO_BUILD_SDK_FOR_TEST set to false
@@ -740,12 +740,12 @@ if (!file(JAVADOC).exists()) throw new Exception("Missing or incorrect path to '
 def inStream = new java.io.BufferedReader(new java.io.InputStreamReader(new java.lang.ProcessBuilder(JAVA, "-version").start().getErrorStream()));
 try {
     if (inStream.readLine() != null) {
-        inStream.readLine();
         String v = inStream.readLine();
         if (v != null) {
             int ib = v.indexOf(" (build ");
             if (ib != -1) {
                 String ver = v.substring(ib + 8, v.size() - 1);
+                System.out.println("ruiamzn test. ver: " + ver);
                 defineProperty("jdkRuntimeVersion", ver)
                 defineProperty("jdkVersion", jdkRuntimeVersion.split("-")[0])
                 defineProperty("jdkBuildNumber", jdkRuntimeVersion.substring(jdkRuntimeVersion.lastIndexOf("-b") + 2))
@@ -1753,9 +1753,6 @@ project(":jmx") {
 project(":systemTests") {
     test {
         enabled = IS_FULL_TEST
-
-        // we don't care about media and web
-        exclude("**/javafx/scene/web/*.*");
         if (!IS_USE_ROBOT) {
             // Disable all robot-based visual tests
             exclude("test/robot/**");
diff --git a/modules/base/src/main/java-jfr/com/sun/javafx/logging/JFRInputEvent.java b/modules/base/src/main/java-jfr/com/sun/javafx/logging/JFRInputEvent.java
new file mode 100644
index 00000000..0cab193c
--- /dev/null
+++ b/modules/base/src/main/java-jfr/com/sun/javafx/logging/JFRInputEvent.java
@@ -0,0 +1,51 @@
+/*
+ * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package com.sun.javafx.logging;
+
+import com.oracle.jrockit.jfr.ContentType;
+import com.oracle.jrockit.jfr.EventDefinition;
+import com.oracle.jrockit.jfr.EventToken;
+import com.oracle.jrockit.jfr.TimedEvent;
+import com.oracle.jrockit.jfr.ValueDefinition;
+
+@EventDefinition(path="javafx/input", name = "JavaFX Input", description="JavaFX input event", stacktrace=false, thread=true)
+public class JFRInputEvent extends TimedEvent {
+
+    @ValueDefinition(name="inputType", description="Input event type", contentType=ContentType.None)
+    private String input;
+
+    public JFRInputEvent(EventToken eventToken) {
+        super(eventToken);
+    }
+
+    public String getInput() {
+        return input;
+    }
+
+    public void setInput(String s) {
+        input = s;
+    }
+}
diff --git a/modules/base/src/main/java-jfr/com/sun/javafx/logging/JFRLogger.java b/modules/base/src/main/java-jfr/com/sun/javafx/logging/JFRLogger.java
new file mode 100644
index 00000000..25b8dbcf
--- /dev/null
+++ b/modules/base/src/main/java-jfr/com/sun/javafx/logging/JFRLogger.java
@@ -0,0 +1,183 @@
+/*
+ * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package com.sun.javafx.logging;
+
+import com.oracle.jrockit.jfr.EventToken;
+import com.oracle.jrockit.jfr.Producer;
+
+/**
+ * Logs pulse related information with Java Flight Recorder.
+ */
+class JFRLogger extends Logger {
+
+    private static final String PRODUCER_URI = "http://www.oracle.com/technetwork/java/javafx/index.html";
+    private static JFRLogger jfrLogger;
+
+    private final Producer producer;
+    private final EventToken pulseEventToken;
+    private final EventToken inputEventToken;
+    private final ThreadLocal<JFRPulseEvent> curPhaseEvent;
+    private final ThreadLocal<JFRInputEvent> curInputEvent;
+
+    private JFRLogger() throws Exception {
+        producer = new Producer("JavaFX producer", "JavaFX producer.", PRODUCER_URI);
+        pulseEventToken = producer.addEvent(JFRPulseEvent.class);
+        inputEventToken = producer.addEvent(JFRInputEvent.class);
+        producer.register();
+        curPhaseEvent = new ThreadLocal() {
+            @Override
+            public JFRPulseEvent initialValue() {
+                return new JFRPulseEvent(pulseEventToken);
+            }
+        };
+        curInputEvent = new ThreadLocal(){
+            @Override
+            public JFRInputEvent initialValue() {
+                return new JFRInputEvent(inputEventToken);
+            }
+        };
+    }
+
+    public static JFRLogger getInstance() {
+        if (jfrLogger == null) {
+            /* Guards against exceptions in the constructor and the absence of jfr.jar at run time */
+            try {
+                Class klass = Class.forName("com.oracle.jrockit.jfr.FlightRecorder");
+                if (klass != null && com.oracle.jrockit.jfr.FlightRecorder.isActive()) {
+                    jfrLogger = new JFRLogger();
+                }
+            }
+            catch (Exception e) {
+                jfrLogger = null;
+            }
+        }
+        return jfrLogger;
+    }
+
+    /**
+     *  Pulse number reconstruction for the render thread relies on the current synchronization
+     *  between the FX and render threads: renderStart() is called on the FX thread after all
+     *  previous RenderJobs have finished and before any new RenderJob is pushed.
+     */
+    private int pulseNumber;
+    private int fxPulseNumber;
+    private int renderPulseNumber;
+    private Thread fxThread;
+
+    @Override
+    public void pulseStart() {
+        ++pulseNumber;
+        fxPulseNumber = pulseNumber;
+        if (fxThread == null) {
+            fxThread = Thread.currentThread();
+        }
+        newPhase("Pulse start");
+    }
+
+    @Override
+    public void pulseEnd() {
+        newPhase(null);
+        fxPulseNumber = 0;
+    }
+
+    @Override
+    public void renderStart() {
+        renderPulseNumber = fxPulseNumber;
+    }
+
+    @Override
+    public void renderEnd() {
+        newPhase(null);
+        renderPulseNumber = 0;
+    }
+
+    /**
+     * Finishes the current phase and starts a new one if phaseName is not null.
+     * @param phaseName The name for the new phase.
+     */
+    @Override
+    public void newPhase(String phaseName) {
+        if (pulseEventToken == null) {
+            return;
+        }
+
+        JFRPulseEvent event = curPhaseEvent.get();
+
+        /* Cleanup if recording has finished */
+        if (!pulseEventToken.isEnabled()) {
+            event.setPhase(null);
+            return;
+        }
+
+        /* Finish the previous phase if any */
+        if (event.getPhase() != null) {
+            event.end();
+            event.commit();
+        }
+
+        /* Done if the new phase name is null */
+        if (phaseName == null) {
+            event.setPhase(null);
+            return;
+        }
+
+        event.reset();
+        event.begin();
+        event.setPhase(phaseName);
+        event.setPulseNumber(Thread.currentThread() == fxThread ? fxPulseNumber : renderPulseNumber);
+    }
+
+    @Override
+    public void newInput(String input) {
+        if (inputEventToken == null) {
+            return;
+        }
+
+        JFRInputEvent event = curInputEvent.get();
+
+        /* Cleanup if recording has finished */
+        if (!inputEventToken.isEnabled()) {
+            event.setInput(null);
+            return;
+        }
+
+        /* Finish the previous input event if any */
+        if (event.getInput() != null) {
+            event.end();
+            event.commit();
+        }
+
+        /* Done if the new input is null */
+        if (input == null) {
+            event.setInput(null);
+            return;
+        }
+
+        event.reset();
+        event.begin();
+        event.setInput(input);
+    }
+}
diff --git a/modules/base/src/main/java-jfr/com/sun/javafx/logging/JFRPulseEvent.java b/modules/base/src/main/java-jfr/com/sun/javafx/logging/JFRPulseEvent.java
new file mode 100644
index 00000000..c08f9bde
--- /dev/null
+++ b/modules/base/src/main/java-jfr/com/sun/javafx/logging/JFRPulseEvent.java
@@ -0,0 +1,62 @@
+/*
+ * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package com.sun.javafx.logging;
+
+import com.oracle.jrockit.jfr.ContentType;
+import com.oracle.jrockit.jfr.EventDefinition;
+import com.oracle.jrockit.jfr.EventToken;
+import com.oracle.jrockit.jfr.TimedEvent;
+import com.oracle.jrockit.jfr.ValueDefinition;
+
+@EventDefinition(path="javafx/pulse", name = "JavaFX Pulse Phase", description="Describes a phase in JavaFX pulse processing", stacktrace=false, thread=true)
+public class JFRPulseEvent extends TimedEvent {
+
+    @ValueDefinition(name="pulseID", description="Pulse number", contentType=ContentType.None, relationKey="http://www.oracle.com/javafx/pulse/id")
+    private int pulseNumber;
+
+    @ValueDefinition(name="phaseName", description="Pulse phase name", contentType=ContentType.None)
+    private String phase;
+
+    public JFRPulseEvent(EventToken eventToken) {
+        super(eventToken);
+    }
+
+    public int getPulseNumber() {
+        return pulseNumber;
+    }
+
+    public void setPulseNumber(int n) {
+        pulseNumber = n;
+    }
+
+    public String getPhase() {
+        return phase;
+    }
+
+    public void setPhase(String s) {
+        phase = s;
+    }
+}
diff --git a/tests/system/src/test/java/com/sun/glass/ui/monocle/ScrollTest.java b/tests/system/src/test/java/com/sun/glass/ui/monocle/ScrollTest.java
index 1586d761..7551df7b 100644
--- a/tests/system/src/test/java/com/sun/glass/ui/monocle/ScrollTest.java
+++ b/tests/system/src/test/java/com/sun/glass/ui/monocle/ScrollTest.java
@@ -57,7 +57,7 @@ public class ScrollTest extends ScrollTestBase {
     /**
      * Tap one finger, drag it to the right few times in order to scroll
      */
-    // @Test Flaky test. Commenting out. TODO: Why flaky?
+    @Test
     public void testScrollRight() throws Exception {
         pressFirstFinger();
         moveOneFinger(getDelta(), 0, 2, true);
diff --git a/tests/system/src/test/java/com/sun/javafx/application/NullCCLTest.java b/tests/system/src/test/java/com/sun/javafx/application/NullCCLTest.java
index eb7f67ce..69974558 100644
--- a/tests/system/src/test/java/com/sun/javafx/application/NullCCLTest.java
+++ b/tests/system/src/test/java/com/sun/javafx/application/NullCCLTest.java
@@ -164,7 +164,7 @@ public class NullCCLTest {
         });
     }
 
-    // @Test Commented out for not using webkit
+    @Test
     public void testHTMLEditor() {
         doTest(() -> {
             HTMLEditor htmlEditor = new HTMLEditor();
@@ -173,7 +173,7 @@ public class NullCCLTest {
         });
     }
 
-    // @Test Commented out for not using webkit
+    @Test
     public void testWebView() throws Exception {
         final String HTML_FILE_NAME = "test.html";
 
diff --git a/tests/system/src/test/java/com/sun/javafx/application/SceneGraphHTMLEditorTest.java b/tests/system/src/test/java/com/sun/javafx/application/SceneGraphHTMLEditorTest.java
new file mode 100644
index 00000000..de289dcd
--- /dev/null
+++ b/tests/system/src/test/java/com/sun/javafx/application/SceneGraphHTMLEditorTest.java
@@ -0,0 +1,114 @@
+/*
+ * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package com.sun.javafx.application;
+
+import com.sun.javafx.application.PlatformImpl;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicReference;
+import javafx.application.Platform;
+import javafx.geometry.Insets;
+import javafx.scene.Scene;
+import javafx.scene.control.Label;
+import javafx.scene.layout.StackPane;
+import javafx.scene.web.HTMLEditor;
+import javafx.stage.Stage;
+import org.junit.After;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import util.Util;
+
+import static org.junit.Assert.*;
+import static util.Util.TIMEOUT;
+
+/**
+ * Unit tests for HTMLEditor SceneGraph.
+ */
+public class SceneGraphHTMLEditorTest {
+
+    private static final CountDownLatch launchLatch = new CountDownLatch(1);
+    private Stage stage;
+
+    @BeforeClass
+    public static void setupOnce() throws Exception {
+        Platform.setImplicitExit(false);
+        PlatformImpl.startup(() -> {
+            launchLatch.countDown();
+        });
+
+        if (!launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {
+            fail("Timeout waiting for Platform to start");
+        }
+    }
+
+    @AfterClass
+    public static void teardownOnce() {
+        Platform.exit();
+    }
+
+    @After
+    public void cleanup() {
+        Thread.setDefaultUncaughtExceptionHandler(null);
+        if (stage != null) {
+            Platform.runLater(stage::hide);
+            stage = null;
+        }
+    }
+
+    @Test
+    public void testHTMLEditorSceneGraph() {
+        final AtomicReference<Throwable> uce = new AtomicReference<>(null);
+        Thread.setDefaultUncaughtExceptionHandler((t, e) -> uce.set(e));
+
+        Util.runAndWait(() -> {
+            stage = new Stage();
+            Label label = new Label("Pane 1");
+            StackPane pane1 = new StackPane(label);
+            pane1.setPadding(new Insets(10));
+            Scene scene = new Scene(pane1, 600, 400);
+            stage.setScene(scene);
+            stage.show();
+
+            HTMLEditor editor = new HTMLEditor();
+            StackPane pane2 = new StackPane(editor);
+            pane2.setPadding(new Insets(10));
+
+            scene.setRoot(pane2);
+        });
+        Util.sleep(2000);
+        Util.runAndWait(() -> {
+            stage.hide();
+            stage = null;
+        });
+
+        // Check for uncaught exception
+        final Throwable e = uce.get();
+        if (e != null) {
+            throw new RuntimeException("UncaughtException", e);
+        }
+    }
+}
diff --git a/tests/system/src/test/java/com/sun/prism/impl/PNTMeshVertexBufferLengthTest.java b/tests/system/src/test/java/com/sun/prism/impl/PNTMeshVertexBufferLengthTest.java
index 05a0ec71..f6b26df8 100644
--- a/tests/system/src/test/java/com/sun/prism/impl/PNTMeshVertexBufferLengthTest.java
+++ b/tests/system/src/test/java/com/sun/prism/impl/PNTMeshVertexBufferLengthTest.java
@@ -32,7 +32,6 @@ import com.sun.prism.impl.BaseMeshShim;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import javafx.application.Application;
-import javafx.application.ConditionalFeature;
 import javafx.application.Platform;
 import javafx.scene.Group;
 import javafx.scene.PerspectiveCamera;
@@ -49,8 +48,6 @@ import org.junit.AfterClass;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.junit.Assume.assumeTrue;
-import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import util.Util;
@@ -283,11 +280,6 @@ public class PNTMeshVertexBufferLengthTest {
         Platform.exit();
     }
 
-    @Before
-    public void setupEach() {
-        assumeTrue(Platform.isSupported(ConditionalFeature.SCENE3D));
-    }
-
     // ========================== TEST CASES ==========================
     @Test(timeout = 5000)
     public void testMeshWithZeroDiv() throws InterruptedException {
diff --git a/tests/system/src/test/java/javafx/scene/web/HTMLEditorTest.java b/tests/system/src/test/java/javafx/scene/web/HTMLEditorTest.java
index 1cac1a48..b5f8f803 100644
--- a/tests/system/src/test/java/javafx/scene/web/HTMLEditorTest.java
+++ b/tests/system/src/test/java/javafx/scene/web/HTMLEditorTest.java
@@ -164,7 +164,7 @@ public class HTMLEditorTest {
      * @bug 8200418
      * Summary Check Style property after removeformat
      */
-    // @Test commented out for containing web test
+    @Test
     public void checkStyleProperty() throws Exception {
         final CountDownLatch editorStateLatch = new CountDownLatch(2);
         final AtomicBoolean result = new AtomicBoolean(false);
diff --git a/tests/system/src/test/java/javafx/stage/RestoreStagePositionTest.java b/tests/system/src/test/java/javafx/stage/RestoreStagePositionTest.java
index 2f3be8ef..4485a303 100644
--- a/tests/system/src/test/java/javafx/stage/RestoreStagePositionTest.java
+++ b/tests/system/src/test/java/javafx/stage/RestoreStagePositionTest.java
@@ -24,7 +24,6 @@
  */
 package test.javafx.stage;
 
-import com.sun.javafx.PlatformUtil;
 import javafx.application.Application;
 import javafx.application.Platform;
 import javafx.beans.value.ChangeListener;
@@ -41,7 +40,6 @@ import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
 import static org.junit.Assert.fail;
-import static org.junit.Assume.assumeTrue;
 
 public class RestoreStagePositionTest {
     static CountDownLatch startupLatch;
@@ -90,9 +88,6 @@ public class RestoreStagePositionTest {
 
     @Test
     public void testUfullscreenPosition() throws Exception {
-        // Disable on Mac until JDK-8176813 is fixed
-        assumeTrue(!PlatformUtil.isMac());
-
         Thread.sleep(200);
         Assert.assertTrue(stage.isShowing());
         Assert.assertFalse(stage.isFullScreen());
@@ -123,16 +118,11 @@ public class RestoreStagePositionTest {
         stage.xProperty().removeListener(listenerY);
 
         Assert.assertEquals("Window was moved", x, stage.getX(), 0.1);
-        System.out.println("ruiamzn test. testUfullscreenPosition. Window was moved - 1");
         Assert.assertEquals("Window was moved", y, stage.getY(), 0.1);
-        System.out.println("ruiamzn test. testUfullscreenPosition. Window was moved - 2");
     }
 
     @Test
     public void testDemaximizedPosition() throws Exception {
-        // Disable on Mac until JDK-8089230 is fixed
-        assumeTrue(!PlatformUtil.isMac());
-
         Thread.sleep(200);
         Assert.assertTrue(stage.isShowing());
         Assert.assertFalse(stage.isMaximized());
diff --git a/tests/system/src/test/java/memoryleak/JSCallbackMemoryTest.java b/tests/system/src/test/java/memoryleak/JSCallbackMemoryTest.java
new file mode 100644
index 00000000..f36116ce
--- /dev/null
+++ b/tests/system/src/test/java/memoryleak/JSCallbackMemoryTest.java
@@ -0,0 +1,799 @@
+/*
+ * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package memoryleak;
+
+import com.sun.javafx.application.PlatformImpl;
+import java.lang.ref.WeakReference;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+import java.util.HashSet;
+import java.util.Set;
+import javafx.application.Platform;
+import javafx.concurrent.Worker;
+import javafx.scene.paint.Color;
+import javafx.scene.Scene;
+import javafx.scene.web.WebView;
+import javafx.stage.Stage;
+import junit.framework.AssertionFailedError;
+import netscape.javascript.JSObject;
+import org.junit.After;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import util.Util;
+
+import static org.junit.Assert.*;
+import static util.Util.TIMEOUT;
+
+public class JSCallbackMemoryTest {
+
+    private static final String html = "<!DOCTYPE html>" +
+        "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-16\">" +
+        "<html>" +
+        "<button id=\"mybtn1\" type=\"button\" onClick=\"callback1.jscallback1()\">Hello</button>" +
+        "<button id=\"mybtn2\" type=\"button\" \">PrimitiveArray</button>" +
+        "<button id=\"mybtn3\" type=\"button\" onClick=\"callback1.releaseObj()\">Release</button>" +
+        "<button id=\"mybtn4\" type=\"button\" onClick=\"callback4.jsobjcallback()\">Object</button>" +
+        "</html>";
+
+    // Sleep time showing/hiding window in milliseconds
+    private static final int SLEEP_TIME = 1000;
+
+    // Sleep time before GC starts again
+    private static final int GCWAIT_TIME = 100;
+
+    // Used to launch the application before running any test
+    private static final CountDownLatch launchLatch = new CountDownLatch(1);
+
+    private static final int NUM_STAGES = 5;
+
+    private static final int OFFSET = 30;
+
+    private static final boolean VERBOSE = false;
+
+    private static Stage primarystage;
+
+    private boolean unexpectedCallback = false;
+
+    private MyObject myObj = new MyObject();
+
+    private Stage[] stages = new Stage[NUM_STAGES];
+
+    private final Set<WeakReference<Object>> refs = new HashSet<>();
+
+    private final boolean[] callbackStatus = new boolean[NUM_STAGES];
+
+    private final WebView[] webviewArray = new WebView[NUM_STAGES];
+
+    private final int[] primitiveArray = { 1, 2, 3, 4, 5 };
+
+    private final Object[] objectArray = { new Object(), new Object(), new Object(), new Object() };
+
+    private Throwable encounteredException = null;
+
+    public final class MyObject {
+
+        // called from JavaScript
+        public void jsobjcallback() {
+            if (VERBOSE) {
+                System.err.println("Object...Callback from JavaScript!");
+            }
+            unexpectedCallback = true;
+        }
+    }
+
+    public final class TestStage extends Stage {
+
+        private int stageIndex = 0;
+
+        TestStage(int index) {
+            this.stageIndex = index;
+        }
+
+        // called from JavaScript
+        public void jscallback1() {
+            if (VERBOSE) {
+                System.err.println("Callback from JavaScript!");
+            }
+
+            callbackStatus[stageIndex] = true;
+        }
+
+        // called from JavaScript
+        public void jscallback2(int[] pArray) {
+            if (VERBOSE) {
+                System.err.println("Strong Ref PrimitiveArray ...Callback from JavaScript!");
+            }
+
+            assertEquals(primitiveArray.length, pArray.length);
+            for (int i = 0; i < pArray.length; i++) {
+                assertEquals(primitiveArray[i], pArray[i]);
+            }
+            callbackStatus[stageIndex] = true;
+        }
+
+        // called from JavaScript
+        public void jscallback3(int[] pArray) {
+            if (VERBOSE) {
+                System.err.println("LocalPrimitiveArray with GC ...Callback from JavaScript!");
+            }
+
+            if (pArray != null) {
+                unexpectedCallback = true;
+            }
+        }
+
+        // called from JavaScript
+        public void jscallback4(Object[] objArray) {
+            if (VERBOSE) {
+                System.err.println("Strong Ref ObjectArray...Callback from JavaScript!");
+            }
+
+            assertEquals(objectArray.length, objArray.length);
+            for (int i = 0; i < objArray.length; i++) {
+                assertSame(objectArray[i], objArray[i]);
+            }
+            callbackStatus[stageIndex] = true;
+        }
+
+        // called from JavaScript
+        public void jscallback5(Object[] objArray) {
+            if (VERBOSE) {
+                System.err.println("LocalObjectArray with GC...Callback from JavaScript!");
+            }
+
+            if (objArray != null) {
+                unexpectedCallback = true;
+            }
+        }
+
+        // called from JavaScript
+        public void releaseObj() {
+            if (VERBOSE) {
+                System.err.println("Remove myObj reference");
+            }
+
+            myObj = null;
+            System.gc();
+        }
+    }
+
+    @BeforeClass
+    public static void doSetupOnce() throws Exception {
+
+        Platform.setImplicitExit(false);
+        PlatformImpl.startup(() -> {
+            launchLatch.countDown();
+        });
+
+        if (!launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {
+            fail("Timeout waiting for Platform to start");
+        }
+
+        Util.runAndWait(() -> {
+            primarystage = new Stage();
+            primarystage.setTitle("Primary Stage");
+            WebView webview = new WebView();
+            Scene scene = new Scene(webview);
+            scene.setFill(Color.LIGHTYELLOW);
+            primarystage.setX(20);
+            primarystage.setY(20);
+            primarystage.setWidth(100);
+            primarystage.setHeight(100);
+            primarystage.setScene(scene);
+            primarystage.show();
+        });
+    }
+
+    @AfterClass
+    public static void doTeardownOnce() {
+        Platform.exit();
+    }
+
+    @After
+    public void doTeardown() {
+        Util.runAndWait(() -> {
+            if (stages != null) {
+                for (int i = 0; i < NUM_STAGES; i++) {
+                    if (stages[i].isShowing()) {
+                        stages[i].hide();
+                    }
+                }
+                stages = null;
+            }
+        });
+    }
+
+    private boolean isAllStagesNull() {
+        for (WeakReference<Object> ref : refs) {
+            if (ref.get() != null) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    private boolean isAllCallbackStatusTrue() {
+        for (int i = 0; i < NUM_STAGES; i++) {
+            if (callbackStatus[i] == false) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    private void checkEncounteredException() {
+        if (encounteredException != null) {
+            if (encounteredException instanceof Error) {
+                throw (Error) encounteredException;
+            } else if (encounteredException instanceof RuntimeException) {
+                throw (RuntimeException) encounteredException;
+            } else {
+                AssertionFailedError err = new AssertionFailedError("Unknown execution exception");
+                err.initCause(encounteredException.getCause());
+                throw err;
+            }
+        }
+    }
+
+    // ========================== TEST CASES ==========================
+
+    @Test(timeout = 20000) public void testJsCallbackLeak() throws Exception {
+        final CountDownLatch latch = new CountDownLatch(NUM_STAGES);
+
+        Util.runAndWait(() -> {
+
+            int stagePosition = 40;
+            for (int i = 0; i < NUM_STAGES; i++) {
+                final Stage stage = new TestStage(i);
+                stages[i] = stage;
+                stage.setTitle("Stage " + i);
+                WebView webview = new WebView();
+                Scene scene = new Scene(webview);
+                scene.setFill(Color.LIGHTYELLOW);
+                stage.setX(stagePosition);
+                stage.setY(stagePosition);
+                stagePosition += OFFSET;
+                stage.setWidth(210);
+                stage.setHeight(180);
+                stage.setScene(scene);
+
+                webview.getEngine().getLoadWorker().stateProperty().addListener((ov, o, n) -> {
+                    if (n == Worker.State.SUCCEEDED) {
+                        try {
+                            final JSObject window = (JSObject) webview.getEngine().executeScript("window");
+                            assertNotNull(window);
+                            window.setMember("callback1", stage);
+                        } catch (Throwable ex) {
+                            encounteredException = ex;
+                        } finally {
+                            latch.countDown();
+                        }
+                    }
+                });
+
+                webview.getEngine().loadContent(html);
+                stage.show();
+                refs.add( new WeakReference<Object>(stage));
+            }
+        });
+
+        try {
+            latch.await();
+        } catch (InterruptedException ex) {
+            throw new AssertionFailedError("Unexpected exception: " + ex);
+        }
+
+        checkEncounteredException();
+
+        Util.runAndWait(() -> {
+
+            for (int i = 0; i < NUM_STAGES; i++) {
+                stages[i].hide();
+            }
+            stages = null;
+        });
+
+
+        for (int j = 0; j < 5; j++) {
+            System.gc();
+            System.runFinalization();
+
+            if (isAllStagesNull()) {
+                break;
+            }
+
+            Util.sleep(SLEEP_TIME);
+        }
+
+        assertTrue("All Stages are null", isAllStagesNull());
+    }
+
+    @Test(timeout = 20000) public void testJsCallbackFunction() throws Exception {
+        final CountDownLatch latch = new CountDownLatch(NUM_STAGES);
+
+        Util.runAndWait(() -> {
+
+            int stagePosition = 40;
+            for (int i = 0; i < NUM_STAGES; i++) {
+                final Stage stage = new TestStage(i);
+                stages[i] = stage;
+                stage.setTitle("Stage " + i);
+                WebView webview = new WebView();
+                Scene scene = new Scene(webview);
+                scene.setFill(Color.LIGHTYELLOW);
+                stage.setX(stagePosition);
+                stage.setY(stagePosition);
+                stagePosition += OFFSET;
+                stage.setWidth(210);
+                stage.setHeight(180);
+                stage.setScene(scene);
+
+                webview.getEngine().getLoadWorker().stateProperty().addListener((ov, o, n) -> {
+                    if (n == Worker.State.SUCCEEDED) {
+                        try {
+                            final JSObject window = (JSObject) webview.getEngine().executeScript("window");
+                            assertNotNull(window);
+                            window.setMember("callback1", stage);
+                            webview.getEngine().executeScript("document.getElementById(\"mybtn1\").click()");
+                        } catch (Throwable ex) {
+                            encounteredException = ex;
+                        } finally {
+                            latch.countDown();
+                        }
+                    }
+                });
+
+                webview.getEngine().loadContent(html);
+                stage.show();
+            }
+        });
+
+        try {
+            latch.await();
+        } catch (InterruptedException ex) {
+            throw new AssertionFailedError("Unexpected exception: " + ex);
+        }
+
+        checkEncounteredException();
+
+        for (int j = 0; j < 5; j++) {
+            System.gc();
+            System.runFinalization();
+
+            if (isAllCallbackStatusTrue()) {
+                break;
+            }
+
+            Util.sleep(SLEEP_TIME);
+        }
+
+        assertTrue("All Button Callback return true", isAllCallbackStatusTrue());
+    }
+
+    @Test(timeout = 20000) public void testJsCallbackReleaseFunction() throws Exception {
+        final CountDownLatch latch = new CountDownLatch(NUM_STAGES);
+
+        Util.runAndWait(() -> {
+
+            int stagePosition = 40;
+            for (int i = 0; i < NUM_STAGES; i++) {
+                final Stage stage = new TestStage(i);
+                stages[i] = stage;
+                stage.setTitle("Stage " + i);
+                WebView webview = new WebView();
+                Scene scene = new Scene(webview);
+                scene.setFill(Color.LIGHTYELLOW);
+                stage.setX(stagePosition);
+                stage.setY(stagePosition);
+                stagePosition += OFFSET;
+                stage.setWidth(210);
+                stage.setHeight(180);
+                stage.setScene(scene);
+
+                webview.getEngine().getLoadWorker().stateProperty().addListener((ov, o, n) -> {
+                    if (n == Worker.State.SUCCEEDED) {
+                        try {
+                            final JSObject window = (JSObject) webview.getEngine().executeScript("window");
+                            assertNotNull(window);
+                            window.setMember("callback1", stage);
+                            window.setMember("callback4", myObj);
+
+                            webview.getEngine().executeScript("document.getElementById(\"mybtn1\").click()");
+
+                            // Below executeScript call will make myObj=null and GC'ed
+                            webview.getEngine().executeScript("document.getElementById(\"mybtn3\").click()");
+
+                            // Below executeScript call should not execute the JS callback (jsobjcallback) and should not cause crash as above executeScript just made myObj=null;
+                            webview.getEngine().executeScript("document.getElementById(\"mybtn4\").click()");
+                        } catch (Throwable ex) {
+                            encounteredException = ex;
+                        } finally {
+                            latch.countDown();
+                        }
+                    }
+                });
+
+                webview.getEngine().loadContent(html);
+                stage.show();
+            }
+        });
+
+        try {
+            latch.await();
+        } catch (InterruptedException ex) {
+            throw new AssertionFailedError("Unexpected exception: " + ex);
+        }
+
+        checkEncounteredException();
+
+        for (int j = 0; j < 5; j++) {
+            System.gc();
+            System.runFinalization();
+
+            if (unexpectedCallback) {
+                break;
+            }
+
+            Util.sleep(GCWAIT_TIME);
+        }
+
+        assertFalse(unexpectedCallback);
+    }
+
+    @Test(timeout = 20000) public void testJsCallbackConsoleFunction() throws Exception {
+        final CountDownLatch latch = new CountDownLatch(NUM_STAGES);
+
+        Util.runAndWait(() -> {
+
+            int stagePosition = 40;
+            for (int i = 0; i < NUM_STAGES; i++) {
+                final Stage stage = new TestStage(i);
+                stages[i] = stage;
+                stage.setTitle("Stage " + i);
+                WebView webview = new WebView();
+                Scene scene = new Scene(webview);
+                scene.setFill(Color.LIGHTYELLOW);
+                stage.setX(stagePosition);
+                stage.setY(stagePosition);
+                stagePosition += OFFSET;
+                stage.setWidth(210);
+                stage.setHeight(180);
+                stage.setScene(scene);
+
+                webview.getEngine().getLoadWorker().stateProperty().addListener((ov, o, n) -> {
+                    if (n == Worker.State.SUCCEEDED) {
+                        try {
+                            final JSObject window = (JSObject) webview.getEngine().executeScript("window");
+                            assertNotNull(window);
+
+                            window.setMember("console", new Object());
+                            System.gc(); System.gc();
+                            System.runFinalization();
+                            webview.getEngine().executeScript("window.console.debug = function() {}");
+                        } catch (Throwable ex) {
+                            encounteredException = ex;
+                        } finally {
+                            latch.countDown();
+                        }
+                    }
+                });
+
+                webview.getEngine().loadContent(html);
+                stage.show();
+            }
+        });
+
+        try {
+            latch.await();
+        } catch (InterruptedException ex) {
+            throw new AssertionFailedError("Unexpected exception: " + ex);
+        }
+
+        checkEncounteredException();
+
+        System.gc();
+        System.runFinalization();
+    }
+
+    @Test(timeout = 20000) public void testJsCallbackStrongRefPrimitiveArrayFunction() throws Exception {
+        final CountDownLatch latch = new CountDownLatch(NUM_STAGES);
+
+        Util.runAndWait(() -> {
+
+            int stagePosition = 40;
+            for (int i = 0; i < NUM_STAGES; i++) {
+                final Stage stage = new TestStage(i);
+                stages[i] = stage;
+                stage.setTitle("Stage " + i);
+                WebView webview = new WebView();
+                Scene scene = new Scene(webview);
+                scene.setFill(Color.LIGHTYELLOW);
+                stage.setX(stagePosition);
+                stage.setY(stagePosition);
+                stagePosition += OFFSET;
+                stage.setWidth(210);
+                stage.setHeight(180);
+                stage.setScene(scene);
+
+                webview.getEngine().getLoadWorker().stateProperty().addListener((ov, o, n) -> {
+                    if (n == Worker.State.SUCCEEDED) {
+                        try {
+                            final JSObject window = (JSObject) webview.getEngine().executeScript("window");
+                            assertNotNull(window);
+                            window.setMember("callback2", stage);
+                            window.setMember("primitiveArray", primitiveArray);
+                            webview.getEngine().executeScript("document.getElementById(\"mybtn2\").onclick = function() {callback2.jscallback2(primitiveArray);}");
+                            webview.getEngine().executeScript("document.getElementById(\"mybtn2\").click()");
+                        } catch (Throwable ex) {
+                            encounteredException = ex;
+                        } finally {
+                            latch.countDown();
+                        }
+                    }
+                });
+
+                webview.getEngine().loadContent(html);
+                stage.show();
+            }
+        });
+
+        try {
+            latch.await();
+        } catch (InterruptedException ex) {
+            throw new AssertionFailedError("Unexpected exception: " + ex);
+        }
+
+        checkEncounteredException();
+
+        for (int j = 0; j < 5; j++) {
+            System.gc();
+            System.runFinalization();
+
+            if (isAllCallbackStatusTrue()) {
+                break;
+            }
+
+            Util.sleep(GCWAIT_TIME);
+        }
+
+        assertTrue("All Button Callback return true", isAllCallbackStatusTrue());
+    }
+
+    @Test(timeout = 20000) public void testJsCallbackLocalPrimitiveArrayFunctionWithGC() throws Exception {
+        final CountDownLatch latch1 = new CountDownLatch(NUM_STAGES);
+        final CountDownLatch latch2 = new CountDownLatch(1);
+
+        Util.runAndWait(() -> {
+
+            int[] localPrimitiveArray = {1, 2, 3, 4, 5};
+            int stagePosition = 40;
+            for (int i = 0; i < NUM_STAGES; i++) {
+                final Stage stage = new TestStage(i);
+                stages[i] = stage;
+                stage.setTitle("Stage " + i);
+                WebView webview = new WebView();
+                webviewArray[i] = webview;
+                Scene scene = new Scene(webview);
+                scene.setFill(Color.LIGHTYELLOW);
+                stage.setX(stagePosition);
+                stage.setY(stagePosition);
+                stagePosition += OFFSET;
+                stage.setWidth(210);
+                stage.setHeight(180);
+                stage.setScene(scene);
+
+                webview.getEngine().getLoadWorker().stateProperty().addListener((ov, o, n) -> {
+                    if (n == Worker.State.SUCCEEDED) {
+                        try {
+                            final JSObject window = (JSObject) webview.getEngine().executeScript("window");
+                            assertNotNull(window);
+                            window.setMember("callback2", stage);
+                            window.setMember("localPrimitiveArray", new int[] { 1, 2, 3, 4, 5 });
+                            System.gc(); System.gc();
+                            System.runFinalization();
+                        } catch (Throwable ex) {
+                            encounteredException = ex;
+                        } finally {
+                            latch1.countDown();
+                        }
+                    }
+                });
+
+                webview.getEngine().loadContent(html);
+                stage.show();
+            }
+        });
+
+        try {
+            latch1.await();
+        } catch (InterruptedException ex) {
+            throw new AssertionFailedError("Unexpected exception: " + ex);
+        }
+
+        checkEncounteredException();
+
+        Util.sleep(SLEEP_TIME);
+
+        Util.runAndWait(() -> {
+
+            for (int i = 0; i < NUM_STAGES; i++) {
+                System.gc();
+                System.runFinalization();
+                webviewArray[i].getEngine().executeScript("document.getElementById(\"mybtn2\").onclick = function() {callback2.jscallback3(localPrimitiveArray);}");
+                webviewArray[i].getEngine().executeScript("document.getElementById(\"mybtn2\").click()");
+            }
+            latch2.countDown();
+        });
+
+        try {
+            latch2.await();
+        } catch (InterruptedException ex) {
+            throw new AssertionFailedError("Unexpected exception: " + ex);
+        }
+
+        assertFalse(unexpectedCallback);
+    }
+
+    @Test(timeout = 20000) public void testJsCallbackStrongRefObjectArrayFunction() throws Exception {
+        final CountDownLatch latch = new CountDownLatch(NUM_STAGES);
+
+        Util.runAndWait(() -> {
+
+            int stagePosition = 40;
+            for (int i = 0; i < NUM_STAGES; i++) {
+                final Stage stage = new TestStage(i);
+                stages[i] = stage;
+                stage.setTitle("Stage " + i);
+                WebView webview = new WebView();
+                Scene scene = new Scene(webview);
+                scene.setFill(Color.LIGHTYELLOW);
+                stage.setX(stagePosition);
+                stage.setY(stagePosition);
+                stagePosition += OFFSET;
+                stage.setWidth(210);
+                stage.setHeight(180);
+                stage.setScene(scene);
+
+                webview.getEngine().getLoadWorker().stateProperty().addListener((ov, o, n) -> {
+                    if (n == Worker.State.SUCCEEDED) {
+                        try {
+                            final JSObject window = (JSObject) webview.getEngine().executeScript("window");
+                            assertNotNull(window);
+                            window.setMember("callback2", stage);
+                            window.setMember("objectArray", objectArray);
+                            webview.getEngine().executeScript("document.getElementById(\"mybtn2\").onclick = function() {callback2.jscallback4(objectArray);}");
+                            webview.getEngine().executeScript("document.getElementById(\"mybtn2\").click()");
+                        } catch (Throwable ex) {
+                            encounteredException = ex;
+                        } finally {
+                            latch.countDown();
+                        }
+                    }
+                });
+
+                webview.getEngine().loadContent(html);
+                stage.show();
+            }
+        });
+
+        try {
+            latch.await();
+        } catch (InterruptedException ex) {
+            throw new AssertionFailedError("Unexpected exception: " + ex);
+        }
+
+        checkEncounteredException();
+
+        for (int j = 0; j < 5; j++) {
+            System.gc();
+            System.runFinalization();
+
+            if (isAllCallbackStatusTrue()) {
+                break;
+            }
+
+            Util.sleep(GCWAIT_TIME);
+        }
+
+        assertTrue("All Button Callback return true", isAllCallbackStatusTrue());
+
+    }
+
+    @Test(timeout = 20000) public void testJsCallbackLocalObjectArrayFunctionWithGC() throws Exception {
+        final CountDownLatch latch1 = new CountDownLatch(NUM_STAGES);
+        final CountDownLatch latch2 = new CountDownLatch(1);
+
+        Util.runAndWait(() -> {
+
+            int stagePosition = 40;
+            for (int i = 0; i < NUM_STAGES; i++) {
+                final Stage stage = new TestStage(i);
+                stages[i] = stage;
+                stage.setTitle("Stage " + i);
+                WebView webview = new WebView();
+                webviewArray[i] = webview;
+                Scene scene = new Scene(webview);
+                scene.setFill(Color.LIGHTYELLOW);
+                stage.setX(stagePosition);
+                stage.setY(stagePosition);
+                stagePosition += OFFSET;
+                stage.setWidth(210);
+                stage.setHeight(180);
+                stage.setScene(scene);
+
+                webview.getEngine().getLoadWorker().stateProperty().addListener((ov, o, n) -> {
+                    if (n == Worker.State.SUCCEEDED) {
+                        try {
+                            final JSObject window = (JSObject) webview.getEngine().executeScript("window");
+                            assertNotNull(window);
+                            window.setMember("callback2", stage);
+                            window.setMember("localObjectArray", new Object[] { new Object(), new Object(), new Object(), new Object() });
+                            System.gc(); System.gc();
+                            System.runFinalization();
+                        } catch (Throwable ex) {
+                            encounteredException = ex;
+                        } finally {
+                            latch1.countDown();
+                        }
+                    }
+                });
+
+                webview.getEngine().loadContent(html);
+                stage.show();
+            }
+        });
+
+        try {
+            latch1.await();
+        } catch (InterruptedException ex) {
+            throw new AssertionFailedError("Unexpected exception: " + ex);
+        }
+
+        checkEncounteredException();
+
+        Util.sleep(SLEEP_TIME);
+
+        Util.runAndWait(() -> {
+
+            for (int i = 0; i < NUM_STAGES; i++) {
+                System.gc();
+                System.runFinalization();
+                webviewArray[i].getEngine().executeScript("document.getElementById(\"mybtn2\").onclick = function() {callback2.jscallback5(localObjectArray);}");
+                webviewArray[i].getEngine().executeScript("document.getElementById(\"mybtn2\").click()");
+            }
+            latch2.countDown();
+        });
+
+        try {
+            latch2.await();
+        } catch (InterruptedException ex) {
+            throw new AssertionFailedError("Unexpected exception: " + ex);
+        }
+
+        assertFalse(unexpectedCallback);
+    }
+}
diff --git a/tests/system/src/test/java/sandbox/SandboxAppTest.java b/tests/system/src/test/java/sandbox/SandboxAppTest.java
index 48f5e8c1..cbd78885 100644
--- a/tests/system/src/test/java/sandbox/SandboxAppTest.java
+++ b/tests/system/src/test/java/sandbox/SandboxAppTest.java
@@ -112,17 +112,17 @@ public class SandboxAppTest {
 
     // TEST CASES
 
-    // @Test (timeout=10000) Comment out for avoiding using webkit. ... does it?
+    @Test (timeout=10000)
     public void testFXApp() throws Exception {
         runSandboxedApp("FXApp");
     }
 
-    // @Test (timeout=10000) Comment out for avoiding using webkit. ... does it?
+    @Test (timeout=10000)
     public void testFXNonApp() throws Exception {
         runSandboxedApp("FXNonApp");
     }
 
-    // @Test (timeout=10000) Comment out for avoiding using webkit. ... does it?
+    @Test (timeout=10000)
     public void testJFXPanelApp() throws Exception {
         runSandboxedApp("JFXPanelApp");
     }
diff --git a/tests/system/src/test/java/test/javafx/scene/RestoreSceneSizeTest.java b/tests/system/src/test/java/test/javafx/scene/RestoreSceneSizeTest.java
index af26237e..ac1cb939 100644
--- a/tests/system/src/test/java/test/javafx/scene/RestoreSceneSizeTest.java
+++ b/tests/system/src/test/java/test/javafx/scene/RestoreSceneSizeTest.java
@@ -24,7 +24,6 @@
  */
 package test.javafx.scene;
 
-import com.sun.javafx.PlatformUtil;
 import javafx.application.Application;
 import javafx.application.Platform;
 import javafx.beans.value.ChangeListener;
@@ -41,7 +40,6 @@ import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
 import static org.junit.Assert.fail;
-import static org.junit.Assume.assumeTrue;
 
 public class RestoreSceneSizeTest {
     static CountDownLatch startupLatch;
@@ -91,9 +89,6 @@ public class RestoreSceneSizeTest {
 
     @Test
     public void testUnfullscreenSize() throws Exception {
-        // Disable on Mac until JDK-8176813 is fixed
-        assumeTrue(!PlatformUtil.isMac());
-
         Thread.sleep(200);
         Assert.assertTrue(stage.isShowing());
         Assert.assertTrue(stage.isFullScreen());
